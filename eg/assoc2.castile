struct assoc {
  key: string;
  value: string;
  next: assoc|void;
} for (update, lookup, remove)

fun empty() {
  return null as assoc|void
}

fun update(k: string, v: string, a: assoc|void) {
  make assoc(key:k, value:v, next:a as assoc|void)
}

lookup : assoc|void, string -> string|void
fun lookup(a: assoc|void, k: string) {
  typecase a is void {
    return null as string|void
  }
  typecase a is assoc {
    if a.key == k {
      return a.value as string|void
    }
    return lookup(a.next, k)
  }
}

fun main() {
  a = update("3", "third", empty());
  a = update("2", "second", a as assoc|void);
  a = update("1", "first", a as assoc|void);
  r = lookup((a as assoc|void), "2");
  print("um");
  typecase r is void { print("NOT FOUND"); }
  typecase r is string { print(r); }
  print("ya");
}
